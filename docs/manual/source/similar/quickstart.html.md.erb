---
title: Quick Start - Similar Product Discovey Engine Template
---

(TODO: UPDATE ME)

People who view this also view X, Y, Z

Query:

- List of ItemIDs
- N (number of items to be recommended)
- List of white-listed item categories (optional)
- List of white-listed ItemIds (optional)
- List of black-listed ItemIds (optional)

PredictedResult:

- a ranked list of recommended itemIDs

Training Data:

- view actions
- item's categories


## Create a new Engine from an Engine Template

Now let's create a new engine called *MySimilar* by cloning the Similar Product Discovery Engine Template, assuming `/home/yourname/predictionio`
is the installation directory of PredictionIO:

```
$ cp -r /home/yourname/predictionio/templates/scala-parallel-similar MySimilar
$ cd MySimilar
```

## Collecting Data


Next, let's collect some training data for the app of this Engine. By default,
the Similar Engine Template supports 2 types of entities: **user** and
**item** and event **view**. An item has the **categories** property, which is a list of category names (String). A user can view an item.

You can send these data to PredictionIO Event Server in real-time easily by
making a HTTP request or through the `EventClient` of an SDK.



<div class="tabs">
  <div data-tab="Python SDK" data-lang="python">
```python
import predictionio

client = predictionio.EventClient(
  access_key=<ACCESS KEY>,
  url=<URL OF EVENTSERVER>,
  threads=5,
  qsize=500
)

# Create a new user

client.create_event(
  event="$set",
  entity_type="user",
  entity_id=<USER_ID>
)

# Create a new item or set existing item's categories

client.create_event(
  event="$set",
  entity_type="item",
  entity_id=item_id,
  properties={
    "categories" : ["<CATEGORY_1>", "<CATEGORY_2>"]
  }
)

# A user views an item

client.create_event(
    event="view",
    entity_type="user",
    entity_id=<USER ID>,
    target_entity_type="item",
    target_entity_id=<ITEM ID>
)
```
  </div>
  <div data-tab="PHP SDK" data-lang="php">
(TODO: UPDATE ME)
```php
<?php
require_once("vendor/autoload.php");
use predictionio\EventClient;

$client = new EventClient(<ACCESS KEY>, <URL OF EVENTSERVER>);

// A user rates an item
$client->createEvent(array(
   'event' => 'rate',
   'entityType' => 'user',
   'entityId' => <USER ID>,
   'targetEntityType' => 'item',
   'targetEntityId' => <ITEM ID>,
   'properties' => array('ratings'=> <RATING>)
));

// A user buys an item
$client->createEvent(array(
   'event' => 'buy',
   'entityType' => 'user',
   'entityId' => <USER ID>,
   'targetEntityType' => 'item',
   'targetEntityId' => <ITEM ID>
));

?>
```
  </div>
  <div data-tab="Ruby SDK" data-lang="ruby">
(TODO: UPDATE ME)
```ruby
# Create a client object.
client = PredictionIO::EventClient.new(<ACCESS KEY>, <URL OF EVENTSERVER>)

# A user rates an item.
client.create_event(
  'rate',
  'user',
  <USER ID>, {
    'targetEntityType' => 'item',
    'targetEntityId' => <ITEM ID>,
    'properties' => { 'rating' => <RATING (float)> }
  }
)

# A user buys an item.
client.create_event(
  'buy',
  'user',
  <USER ID>, {
    'targetEntityType' => 'item',
    'targetEntityId' => <ITEM ID>
  }
)
```
  </div>
  <div data-tab="Java SDK" data-lang="java">
(TODO: UPDATE ME)
```java
import io.prediction.Event;
import io.prediction.EventClient;

EventClient client = new EventClient(<ACCESS KEY>, <URL OF EVENTSERVER>);

// A user rates an item
Event rateEvent = new Event()
    .event("rate")
    .entityType("user")
    .entityId(<USER_ID>)
    .targetEntityType("item")
    .targetEntityId(<ITEM_ID>)
    .property("rating", new Float(<RATING>));
client.createEvent(rateEvent);

// A user buys an item
Event buyEvent = new Event()
    .event("buy")
    .entityType("user")
    .entityId(<USER_ID>)
    .targetEntityType("item")
    .targetEntityId(<ITEM_ID>);
client.createEvent(buyEvent);
```
  </div>
  <div data-tab="REST API" data-lang="json">
```
# Create a new user

curl -i -X POST <URL OF EVENTSERVER>/events.json?accessKey=<ACCESS KEY> \
-H "Content-Type: application/json" \
-d '{
  "event" : "$set",
  "entityType" : "user"
  "entityId" : <USER ID>,
  "eventTime" : <TIME OF THIS EVENT>
}'

# Create a new item or set existing item's categories

curl -i -X POST <URL OF EVENTSERVER>/events.json?accessKey=<ACCESS KEY> \
-H "Content-Type: application/json" \
-d '{
  "event" : "$set",
  "entityType" : "item"
  "entityId" : <ITEM ID>,
  "properties" : {
    "categories" : ["<CATEGORY_1>", "<CATEGORY_2>"]
  }
  "eventTime" : <TIME OF THIS EVENT>
}'

# A user views an item

curl -i -X POST <URL OF EVENTSERVER>/events.json?accessKey=<ACCESS KEY> \
-H "Content-Type: application/json" \
-d '{
  "event" : "view",
  "entityType" : "user"
  "entityId" : <USER ID>,
  "targetEntityType" : "item",
  "targetEntityId" : <ITEM ID>,
  "eventTime" : <TIME OF THIS EVENT>
}'

```
  </div>
</div>


## Sample Data for Quick Start

For demonstration purpose, a python script is provided to import sample data. It imports 10 users (with user ID "u1" to "u10") and 50 items (with item ID "i1" to "i50") with some random assigned categories ( with categories "c1" to "c6"). Each user then randomly view 10 items.

First, make sure you are under the `MySimilar` directory. Execute the following to import the data (Replace the value of access_key parameter by your **Access Key**):

```
$ python data/import_eventserver.py --access_key 3mZWDzci2D5YsqAnqNnXH9SB6Rg3dsTBs8iHkK6X2i54IQsIZI1eEeQQyMfs7b3F
```

You should see the following output:

```
...
User u10 views item i20
User u10 views item i17
User u10 views item i22
User u10 views item i31
User u10 views item i18
User u10 views item i29
160 events are imported.
```

WARNING: If you experience error similar to the following:
**TypeError: __init__() got an unexpected keyword argument 'access_key'**
please update the Python SDK to the latest version.

## Deploy the Engine as a Service

Now you can build, train, and deploy the engine. First, make sure you are under the `MySimilar` directory.

```
$ cd MySimilar
```

Under the directory, you should find an `engine.json` file; this is where you specify parameters for the engine.  Make sure the `appId` defined in the file match your **App ID**.

```
...
"datasource": {
  "params" : {
    "appId": 1
  }
},
...
```

### Building

Start with building your *MySimilar* engine.

```
$ pio build
```

Upon successful build, you should see a console message similar to the
following.

```
2014-11-21 16:37:25,817 INFO  tools.Console$ - Your engine is ready for training.
```

### Training

Train your successfully-built engine.

```
$ pio train
```

When your engine is trained successfully, you should see a console message
similar to the following.

```
2014-11-21 16:33:17,528 INFO  workflow.CoreWorkflow$ - Your engine has been trained successfully.
```

### Deploying

Now your engine is ready to deploy.

```
$ pio deploy
```

This will deploy an engine that binds to http://localhost:8000. You can visit
that page in your web browser to check its status.

![Engine Status](/images/engine-server.png)


Now, You can try to retrieve predicted results. To retrieve 4 items which are similar to item ID "i1". You send this JSON `{ "items": ["i1"], "num": 4 }` to the deployed engine and it will return a JSON of the recommended items. Simply send a query by making a HTTP request or through the `EngineClient` of an SDK:

<div class="tabs">
  <div data-tab="Python SDK" data-lang="python">
```python
import predictionio
engine_client = predictionio.EngineClient(url="http://localhost:8000")
print engine_client.send_query({"items": ["i1"], "num": 4})
```
  </div>
  <div data-tab="PHP SDK" data-lang="php">
(TODO: UPDATE ME)
```php
<?php
require_once("vendor/autoload.php");
use predictionio\EngineClient;

$client = new EngineClient('http://localhost:8000');

$response = $client->sendQuery(array('items'=> 'i1', 'num'=> 4));
print_r($response);

?>
```
  </div>
  <div data-tab="Ruby SDK" data-lang="ruby">
    (TODO: UPDATE ME)
```ruby
# Create client object.
client = PredictionIO::EngineClient.new(<ENGINE DEPLOY URL>)

# Query PredictionIO.
response = client.send_query('items' => <USER ID>, 'num' => <NUMBER (integer)>)

puts response
```
  </div>
  <div data-tab="Java SDK" data-lang="java">
    (TODO: UPDATE ME)
```java
import com.google.common.collect.ImmutableMap;
import com.google.gson.JsonObject;

import io.prediction.EngineClient;

// create client object
EngineClient engineClient = new EngineClient(<ENGINE DEPLOY URL>);

// query
JsonObject response = engineClient.sendQuery(ImmutableMap.<String, Object>of(
        "user", "1",
        "num",  4
    ));
```
  </div>
  <div data-tab="REST API" data-lang="json">
```
$ curl -H "Content-Type: application/json" \
-d '{ "items": ["i1"], "num": 4 }' \
http://localhost:8000/queries.json

{"itemScores":[{"item":"i43","score":0.7071067811865475},{"item":"i21","score":0.7071067811865475},{"item":"i46","score":0.5773502691896258},{"item":"i8","score":0.5773502691896258}]}
```
  </div>
</div>

*MySimilar* is now running. To update the model periodically with new data, simply set up a cron job to call `$pio train` and `$pio deploy`.


## Advanced Query

Recommend items which are similar to multiple items:

```
curl -H "Content-Type: application/json" \
-d '{ "items": ["i1", "i3"], "num": 10}' \
http://localhost:8000/queries.json

{"itemScores":[{"item":"i12","score":1.1700499715209998},{"item":"i21","score":1.1153550716504106},{"item":"i43","score":1.1153550716504106},{"item":"i14","score":1.0773502691896257},{"item":"i39","score":1.0773502691896257},{"item":"i26","score":1.0773502691896257},{"item":"i44","score":1.0773502691896257},{"item":"i38","score":0.9553418012614798},{"item":"i36","score":0.9106836025229592},{"item":"i46","score":0.9106836025229592}]}
```

In addition, the Query support the following optional parmaters `categories`, `whiteList` and `blackList`.

Recommend items with selected categories:

```
curl -H "Content-Type: application/json" \
-d '{
  "items": ["i1", "i3"],
  "num": 10,
  "categories" : ["c4", "c3"]
}' \
http://localhost:8000/queries.json

{"itemScores":[{"item":"i21","score":1.1153550716504106},{"item":"i14","score":1.0773502691896257},{"item":"i26","score":1.0773502691896257},{"item":"i39","score":1.0773502691896257},{"item":"i44","score":1.0773502691896257},{"item":"i45","score":0.7886751345948129},{"item":"i47","score":0.7618016810571367},{"item":"i9","score":0.7618016810571367},{"item":"i28","score":0.7618016810571367},{"item":"i6","score":0.7618016810571367}]}
```

Recommend items in the whiteList:

```
curl -H "Content-Type: application/json" \
-d '{
  "items": ["i1", "i3"],
  "num": 10,
  "categories" : ["c4", "c3"],
  "whiteList": ["i21", "i26", "i40"]
}' \
http://localhost:8000/queries.json

{"itemScores":[{"item":"i21","score":1.1153550716504106},{"item":"i26","score":1.0773502691896257}]}
```

Recommend items not in the blackList:

```
curl -H "Content-Type: application/json" \
-d '{
  "items": ["i1", "i3"],
  "num": 10,
  "categories" : ["c4", "c3"],
  "blackList": ["i21", "i26", "i40"]
}' \
http://localhost:8000/queries.json

{"itemScores":[{"item":"i39","score":1.0773502691896257},{"item":"i44","score":1.0773502691896257},{"item":"i14","score":1.0773502691896257},{"item":"i45","score":0.7886751345948129},{"item":"i47","score":0.7618016810571367},{"item":"i6","score":0.7618016810571367},{"item":"i28","score":0.7618016810571367},{"item":"i9","score":0.7618016810571367},{"item":"i29","score":0.6220084679281463},{"item":"i30","score":0.5386751345948129}]}
```
